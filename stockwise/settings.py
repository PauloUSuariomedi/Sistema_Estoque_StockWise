"""
Django settings for stockwise project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import json
from pathlib import Path

from django.db import models
from django.templatetags.static import static
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _

# from django.templatetags.static import static
# from django.urls import reverse_lazy
# from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-bax$frlwxrx1a2wja+)@7wollee!n_m!wit#=8%=i^1-_%fanf"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
CSRF_TRUSTED_ORIGINS = ["https://app.romulosousa.online"]


# Application definition

INSTALLED_APPS = [
    "daphne",
    "django_eventstream",
    "unfold",  # before django.contrib.admin
    "unfold.contrib.filters",  # optional, if special filters are needed
    "unfold.contrib.forms",  # optional, if special form elements are needed
    "unfold.contrib.inlines",  # optional, if special inlines are needed
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "core",
    "stock",
    "integrations",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "stockwise.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "stockwise.wsgi.application"
ASGI_APPLICATION = "stockwise.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "stockwise",
        "USER": "metatron",
        "PASSWORD": "199718",
        "HOST": "db",
        "PORT": "5432",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "pt-br"

LOCALE_PATHS = [BASE_DIR / "locale"]

TIME_ZONE = "America/Sao_Paulo"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
AUTH_USER_MODEL = "stock.User"

UNFOLD = {
    "SITE_TITLE": "Stock Wise",
    "SITE_HEADER": "Stock Wise",
    "SITE_URL": "/admin",
    # "SITE_ICON": lambda request: static("icon.svg"),  # both modes, optimise for 32px height
    # "SITE_ICON": {
    #     "light": lambda request: static("icon-light.svg"),  # light mode
    #     "dark": lambda request: static("icon-dark.svg"),  # dark mode
    # },
    # "SITE_LOGO": lambda request: static("logo.svg"),  # both modes, optimise for 32px height
    # "SITE_LOGO": {
    #     "light": lambda request: static("logo-light.svg"),  # light mode
    #     "dark": lambda request: static("logo-dark.svg"),  # dark mode
    # },
    "SITE_SYMBOL": "speed",  # symbol from icon set
    # "SITE_FAVICONS": [
    #     {
    #         "rel": "icon",
    #         "sizes": "32x32",
    #         "type": "image/svg+xml",
    #         "href": lambda request: static("favicon.svg"),
    #     },
    # ],
    "SHOW_HISTORY": True,  # show/hide "History" button, default: True
    # "SHOW_VIEW_ON_SITE": True,  # show/hide "View on site" button, default: True
    "ENVIRONMENT": "stockwise.settings.environment_callback",
    "DASHBOARD_CALLBACK": "stockwise.settings.dashboard_callback",
    "THEME": "light",  # Force theme: "dark" or "light". Will disable theme switcher
    # "LOGIN": {
    #     "image": lambda request: static("sample/login-bg.jpg"),
    #     "redirect_after": lambda request: reverse_lazy("admin:APP_MODEL_changelist"),
    # },
    "COLORS": {
        # "font": {
        #     "subtle-light": "107 114 128",
        #     "subtle-dark": "156 163 175",
        #     "default-light": "75 85 99",
        #     "default-dark": "209 213 219",
        #     "important-light": "17 24 39",
        #     "important-dark": "243 244 246",
        # },
        "primary": {
            "50": "#e0fffc",
            "100": "#94ffff",
            "200": "#29feff",
            "300": "#00adaf",
            "400": "#006b68",
            "500": "#005954",
            "600": "#004846",
            "700": "#003938",
            "800": "#002d2d",
            "900": "#002121",
        },
    },
    # "EXTENSIONS": {
    #     "modeltranslation": {
    #         "flags": {
    #             "en": "ðŸ‡¬ðŸ‡§",
    #             "fr": "ðŸ‡«ðŸ‡·",
    #             "nl": "ðŸ‡§ðŸ‡ª",
    #         },
    #     },
    # },
    "SIDEBAR": {
        "show_search": False,
        "show_all_applications": False,
        "navigation": [
            {
                "title": _("Administration"),
                "separator": False,
                "collapsible": False,
                "items": [
                    {
                        "title": _("Dashboard"),
                        "icon": "dashboard",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("admin:index"),
                    },
                    {
                        "title": _("UsuÃ¡rios"),
                        "icon": "people",
                        "link": reverse_lazy("admin:stock_user_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Grupos"),
                        "icon": "groups",
                        "link": reverse_lazy("admin:auth_group_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Logs"),
                        "icon": "format_list_bulleted",
                        "link": reverse_lazy("admin:admin_logentry_changelist"),
                        "permission": lambda request: has_permission(
                            request,
                            [
                                "Gerente",
                                "UsuÃ¡rio",
                            ],
                        ),
                    },
                ],
            },
            {
                "title": _("Produtos"),
                "separator": True,
                "collapsible": False,
                "items": [
                    {
                        "title": _("Cadastrar Produtos"),
                        "icon": "add_circle",
                        "link": reverse_lazy("admin:stock_product_changelist"),
                    },
                    {
                        "title": _("Cadastrar Categorias"),
                        "icon": "add_circle",
                        "link": reverse_lazy("admin:stock_category_changelist"),
                    },
                ],
            },
            {
                "title": _("Estoque"),
                "separator": True,
                "collapsible": False,
                "items": [
                    {
                        "title": _("Adicionar estoques"),
                        "icon": "package_2",
                        "link": reverse_lazy("admin:stock_stock_changelist"),
                    },
                    {
                        "title": _("Entradas"),
                        "icon": "place_item",
                        "link": reverse_lazy("admin:stock_stockentry_changelist"),
                    },
                    {
                        "title": _("SaÃ­das"),
                        "icon": "move_item",
                        "link": reverse_lazy("admin:stock_stockexit_changelist"),
                    },
                ],
            },
        ],
    },
    "STYLES": [
        "https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css",
        lambda request: static("css/styles.css"),
    ],
    "SCRIPTS": [
        "https://cdn.jsdelivr.net/npm/toastify-js",
        "https://cdn.jsdelivr.net/npm/chart.js",
        lambda request: static("js/sse.js"),
        lambda request: static("js/chartjs-plugin-datalabels.js"),
        lambda request: static("django_eventstream/eventsource.min.js"),
        lambda request: static("django_eventstream/reconnecting-eventsource.js"),
    ],
}


def has_permission(request, required_groups: list[str]):
    """
    Check if the user has the required permissions based on their group membership.
    Args:
        request: The HTTP request object containing the user information.
        required_groups (list[str]): A list of group names that are required for permission.
    Returns:
        bool: True if the user belongs to any of the required groups, False otherwise.
    """
    if request.user.is_superuser:
        return True

    user_groups = request.user.groups.values_list("name", flat=True)

    return any(group in user_groups for group in required_groups)


def dashboard_callback(request, context):
    """
    Callback to prepare custom variables for index template which is used as dashboard
    template. It can be overridden in application by creating custom admin/index.html.
    """
    from stock.models import Category, Stock, StockEntry, StockExit

    categories = Category.objects.all()
    labels = [category.name for category in categories]
    data = [category.products.count() for category in categories]
    total_products = sum(data)
    category_percentages = [
        {
            "category": category.name,
            "percentage": (
                int((category.products.count() / total_products) * 100)
                if total_products
                else 0
            ),
        }
        for category in categories
    ]

    entries_stock_movements = StockEntry.objects.filter(
        product__isnull=False,
        stock__isnull=False,
    ).order_by("-created_at")
    exit_stock_movements = StockExit.objects.filter(
        product__isnull=False,
        stock__isnull=False,
    ).order_by("-created_at")

    stock_movements = [
        {
            "operation_type": 1,
            "text": f"O usuÃ¡rio {movement.product.user.username} adicionou {movement.quantity} produto(s) no dia {movement.created_at.strftime("%Y/%m/%d %H:%M:%S")}",
            "created_at": movement.created_at,
        }
        for movement in entries_stock_movements
    ]
    stock_movements += [
        {
            "operation_type": 0,
            "text": f"O usuÃ¡rio {movement.product.user.username} removeu {movement.quantity} produto(s) no dia {movement.created_at.strftime("%Y/%m/%d %H:%M:%S")}",
            "created_at": movement.created_at,
        }
        for movement in exit_stock_movements
    ]

    kpis = (
        Stock.objects.all()
        .annotate(price_product=models.F("quantity") * models.F("product__base_price"))
        .aggregate(
            total=models.Sum("price_product"),
            count=models.Count("product"),
            average=models.Avg("price_product"),
            max=models.Max("product__base_price"),
        )
    )

    # Products per supplier quantity
    products_per_supplier = (
        Stock.objects.all()
        .values(supplier_name=models.F("supplier__name"))
        .annotate(products=models.Count("product"))
    )

    # Products per supplier percentage
    total_products_per_supplier = sum(
        [products["products"] for products in products_per_supplier]
    )
    products_per_supplier = [
        {
            "supplier_name": products["supplier_name"],
            "products": products["products"],
            "percentage": int(
                (products["products"] / total_products_per_supplier) * 100
            ),
        }
        for products in products_per_supplier
    ]

    context.update(
        {
            "kpi": {
                "total_products": kpis.get("total"),
                "average": kpis.get("average"),
                "max": kpis.get("max"),
            },
            "stock_movements": sorted(
                stock_movements,
                key=lambda x: x.get("created_at"),
                reverse=True,
            )[:4],
            "data": json.dumps(
                {
                    "productQuantity": {
                        "labels": labels,
                        "data": data,
                    },
                    "productPercentage": {
                        "labels": [
                            category["category"] for category in category_percentages
                        ],
                        "data": [
                            category["percentage"] for category in category_percentages
                        ],
                    },
                    "productsPerSupplierQuantity": {
                        "labels": [
                            products["supplier_name"]
                            for products in products_per_supplier
                        ],
                        "data": [
                            products["products"] for products in products_per_supplier
                        ],
                    },
                    "productsPerSupplierPercentage": {
                        "labels": [
                            product["supplier_name"]
                            for product in products_per_supplier
                        ],
                        "data": [
                            product["percentage"] for product in products_per_supplier
                        ],
                    },
                }
            ),
        }
    )
    return context


def environment_callback(request):
    """
    Callback has to return a list of two values represeting text value and the color
    type of the label displayed in top right corner.
    """
    return ["Local", "warning"]  # info, danger, warning, success


def badge_callback(request):
    return 3


def permission_callback(request):
    return True
